A loop statement allows us to execute a statement or group of statements multiple times.
Coz statements are executed sequentially - the first statement in a function is executed first, followed by the second and so on.

Types of loops
while loop - Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.
for loop - Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
nested loops - You can use one or more loop inside any another while or for loop.
 CHECK THE EXAMPLES IN THE CODE.

 The Infinite Loop
 A loop becomes infinite loop if a condition never becomes FALSE.
 NOTE:- An infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required.

Using else Statement with Loops
If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.
If the else statement is used with a while loop, the else statement is executed when the condition becomes false.
CHECK OUT THE EXAMPLE IN THE CODE.

Single Statement Suites
Similar to the if statement syntax, if your while clause consists only of a single statement, it may be placed on the same line as the while header.

for Loop Statements
The for statement in Python has the ability to iterate over the items of any sequence such as a list or a string.
 i) The range() function
 The built-in function range() is the right function to iterate over a sequence of numbers. It generates an iterator of arithmetic progressions.

Iterating by Sequence Index
An alternative way of iterating through each item is by index offset into the sequence itself.

Using else Statement with Loops
Having as else statement associated with a loop statement is supported in Python.
- If the else statement is used with a for loop, the else block is executed only if for loops terminates normally and not not by encountering break statement.
- If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

Nested Loops
Python allows the use of one loop inside another loop. E.g A for loop can be inside a while loop and vice versa.

Loop Control Statements
The change the execution from its normal sequence.
1. Break statement - Terminates the loop statement and transfers execution to the statement immediately following the loop.
2. Continue statement - Causes the loop to skip the remainder of its body and immediately retest itd condition prior to reiterating.
3. Pass statement - Is used when a statement is required syntactically but you do not want any command or code to execute.

Iterator and Generator
Iterator is an object which allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation.
In python, an iterator object implements 2 methods; iter() and next()
A generator is a function that produces or yields a sequence of values using yield method.
When a generator function is called, it returns a generator object without even beginning execution of the function.
When the next() method is called for the first time, the function starts executing, until it reaches the yield statement, which returns the yielded value.
Therefore, the last execution and the second next()call continues from previous value.