A loop statement allows us to execute a statement or group of statements multiple times.
Coz statements are executed sequentially - the first statement in a function is executed first, followed by the second and so on.

Types of loops
while loop - Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.
for loop - Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
nested loops - You can use one or more loop inside any another while or for loop.
 CHECK THE EXAMPLES IN THE CODE.

 The Infinite Loop
 A loop becomes infinite loop if a condition never becomes FALSE.
 NOTE:- An infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required.

Using else Statement with Loops
If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.
If the else statement is used with a while loop, the else statement is executed when the condition becomes false.
CHECK OUT THE EXAMPLE IN THE CODE.

Single Statement Suites
Similar to the if statement syntax, if your while clause consists only of a single statement, it may be placed on the same line as the while header.

for Loop Statements
The for statement in Python has the ability to iterate over the items of any sequence such as a list or a string.
 i) The range() function
 The built-in function range() is the right function to iterate over a sequence of numbers. It generates an iterator of arithmetic progressions.

Iterating by Sequence Index
An alternative way of iterating through each item is by index offset into the sequence itself.
